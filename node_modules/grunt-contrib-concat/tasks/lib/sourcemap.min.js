"use strict";exports.init=function(grunt){var exports={};var path=require("path");var chalk=require("chalk");var SourceMapConsumer=require("source-map").SourceMapConsumer;var SourceMapGenerator=require("source-map").SourceMapGenerator;var SourceNode=require("source-map").SourceNode;exports.helper=function(files,options){var dest=files.dest;if(options.sourceMapStyle==="inline"){}else if(typeof options.sourceMapName==="string"){dest=options.sourceMapName}else if(typeof options.sourceMapName==="function"){dest=options.sourceMapName(dest)}else{dest=dest+".map"}if(options.sourceMapStyle==="inline"&&options.sourceMapName){grunt.log.warn("Source map will be inlined, sourceMapName option ignored.")}return new SourceMapConcatHelper({files:files,dest:dest,options:options})};function SourceMapConcatHelper(options){this.files=options.files;this.dest=options.dest;this.options=options.options;this.node=new SourceNode;this.maps=[]}SourceMapConcatHelper.prototype._dummyNode=function(src,name){var node=new SourceNode;var lineIndex=1;var charIndex=0;var tokens=src.split(/\b/g);tokens.forEach(function(token,i){node.add(new SourceNode(lineIndex,charIndex,name,token));token.split("\n").forEach(function(subtoken,j,subtokens){if(j<subtokens.length-1){lineIndex++;charIndex=0}else{charIndex+=subtoken.length}})});return node};SourceMapConcatHelper.prototype.add=function(src){this.node.add(this._dummyNode(src))};SourceMapConcatHelper.prototype.addlines=function(src,filename){var relativeFilename=path.relative(path.dirname(this.dest),filename);var node;if(/\/\/[@#]\s+sourceMappingURL=(.+)/.test(src)||/\/\*#\s+sourceMappingURL=(\S+)\s+\*\//.test(src)){var sourceMapFile=RegExp.$1;var sourceMapPath;var sourceContent;if(/data:application\/json;base64,([^\s]+)/.test(sourceMapFile)){sourceMapPath=filename;sourceContent=new Buffer(RegExp.$1,"base64").toString()}else{sourceMapPath=path.resolve(path.dirname(filename),sourceMapFile);sourceContent=grunt.file.read(sourceMapPath)}var sourceMap=JSON.parse(sourceContent);var sourceMapConsumer=new SourceMapConsumer(sourceMap);var sourcePathToSourceMapPath=path.relative(path.dirname(this.dest),path.dirname(sourceMapPath));this.maps.push([sourceMapConsumer,relativeFilename,sourcePathToSourceMapPath]);src=src.replace(/[@#]\s+sourceMappingURL=[^\s]+/,"");node=SourceNode.fromStringWithSourceMap(src,sourceMapConsumer,sourcePathToSourceMapPath)}else{node=this._dummyNode(src,relativeFilename)}this.node.add(node);if(this.options.sourceMapStyle!=="link"){this.node.setSourceContent(relativeFilename,src)}return src};SourceMapConcatHelper.prototype.url=function(){var mapfilepath;if(this.options.sourceMapStyle==="inline"){var inlineMap=new Buffer(this._write()).toString("base64");mapfilepath="data:application/json;base64,"+inlineMap}else{mapfilepath=path.relative(path.dirname(this.files.dest),this.dest)}var url;if(/\.css$/.test(this.files.dest)){url="\n/*# sourceMappingURL="+mapfilepath+" */"}else{url="\n//# sourceMappingURL="+mapfilepath}return url};SourceMapConcatHelper.prototype._write=function(){var code_map=this.node.toStringWithSourceMap({file:path.relative(path.dirname(this.dest),this.files.dest)});var generator=SourceMapGenerator.fromSourceMap(new SourceMapConsumer(code_map.map.toJSON()));this.maps.forEach(Function.apply.bind(generator.applySourceMap,generator));var newSourceMap=generator.toJSON();if(this.options.sourceMapStyle==="inline"){grunt.log.writeln("Source map for "+chalk.cyan(this.files.dest)+" inlined.");return JSON.stringify(newSourceMap,null,"")}else{grunt.file.write(this.dest,JSON.stringify(newSourceMap,null,""));grunt.log.writeln("Source map "+chalk.cyan(this.dest)+" created.")}};SourceMapConcatHelper.prototype.write=function(){if(this.options.sourceMapStyle!=="inline"){this._write()}};return exports};