"use strict";var grunt=require("../grunt");var path=require("path");var parent=grunt.util.task.create();var task=module.exports=Object.create(parent);var registry={tasks:[],untasks:[],meta:{}};var lastInfo;var loadTaskDepth=0;var errorcount;task.registerTask=function(name){registry.tasks.push(name);parent.registerTask.apply(task,arguments);var thisTask=task._tasks[name];thisTask.meta=grunt.util._.clone(registry.meta);var _fn=thisTask.fn;thisTask.fn=function(arg){var name=thisTask.name;errorcount=grunt.fail.errorcount;Object.defineProperty(this,"errorCount",{enumerable:true,get:function(){return grunt.fail.errorcount-errorcount}});this.requires=task.requires.bind(task);this.requiresConfig=grunt.config.requires;this.options=function(){var args=[{}].concat(grunt.util.toArray(arguments)).concat([grunt.config([name,"options"])]);var options=grunt.util._.extend.apply(null,args);grunt.verbose.writeflags(options,"Options");return options};var logger=_fn.alias||thisTask.multi&&(!arg||arg==="*")?"verbose":"log";grunt[logger].header('Running "'+this.nameArgs+'"'+(this.name!==this.nameArgs?" ("+this.name+")":"")+" task");grunt[logger].debug("Task source: "+thisTask.meta.filepath);return _fn.apply(this,arguments)};return task};function isValidMultiTaskTarget(target){return!/^_|^options$/.test(target)}task.normalizeMultiTaskFiles=function(data,target){var prop,obj;var files=[];if(grunt.util.kindOf(data)==="object"){if("src"in data||"dest"in data){obj={};for(prop in data){if(prop!=="options"){obj[prop]=data[prop]}}files.push(obj)}else if(grunt.util.kindOf(data.files)==="object"){for(prop in data.files){files.push({src:data.files[prop],dest:grunt.config.process(prop)})}}else if(Array.isArray(data.files)){grunt.util._.flatten(data.files).forEach(function(obj){var prop;if("src"in obj||"dest"in obj){files.push(obj)}else{for(prop in obj){files.push({src:obj[prop],dest:grunt.config.process(prop)})}}})}}else{files.push({src:data,dest:grunt.config.process(target)})}if(files.length===0){grunt.verbose.writeln("File: "+"[no files]".yellow);return[]}files=grunt.util._(files).chain().forEach(function(obj){if(!("src"in obj)||!obj.src){return}if(Array.isArray(obj.src)){obj.src=grunt.util._.flatten(obj.src)}else{obj.src=[obj.src]}}).map(function(obj){var expandOptions=grunt.util._.extend({},obj);delete expandOptions.src;delete expandOptions.dest;if(obj.expand){return grunt.file.expandMapping(obj.src,obj.dest,expandOptions).map(function(mapObj){var result=grunt.util._.extend({},obj);result.orig=grunt.util._.extend({},obj);result.src=grunt.config.process(mapObj.src);result.dest=grunt.config.process(mapObj.dest);["expand","cwd","flatten","rename","ext"].forEach(function(prop){delete result[prop]});return result})}var result=grunt.util._.extend({},obj);result.orig=grunt.util._.extend({},obj);if("src"in result){Object.defineProperty(result,"src",{enumerable:true,get:function fn(){var src;if(!("result"in fn)){src=obj.src;src=Array.isArray(src)?grunt.util._.flatten(src):[src];fn.result=grunt.file.expand(expandOptions,src)}return fn.result}})}if("dest"in result){result.dest=obj.dest}return result}).flatten().value();if(grunt.option("verbose")){files.forEach(function(obj){var output=[];if("src"in obj){output.push(obj.src.length>0?grunt.log.wordlist(obj.src):"[no src]".yellow)}if("dest"in obj){output.push("-> "+(obj.dest?String(obj.dest).cyan:"[no dest]".yellow))}if(output.length>0){grunt.verbose.writeln("Files: "+output.join(" "))}})}return files};task.registerMultiTask=function(name,info,fn){if(fn==null){fn=info;info="Custom multi task."}var thisTask;task.registerTask(name,info,function(target){var name=thisTask.name;this.args=grunt.util.toArray(arguments).slice(1);if(!target||target==="*"){return task.runAllTargets(name,this.args)}else if(!isValidMultiTaskTarget(target)){throw new Error('Invalid target "'+target+'" specified.')}this.requiresConfig([name,target]);this.options=function(){var targetObj=grunt.config([name,target]);var args=[{}].concat(grunt.util.toArray(arguments)).concat([grunt.config([name,"options"]),grunt.util.kindOf(targetObj)==="object"?targetObj.options:{}]);var options=grunt.util._.extend.apply(null,args);grunt.verbose.writeflags(options,"Options");return options};this.target=target;this.flags={};this.args.forEach(function(arg){this.flags[arg]=true},this);this.data=grunt.config([name,target]);this.files=task.normalizeMultiTaskFiles(this.data,target);Object.defineProperty(this,"filesSrc",{enumerable:true,get:function(){return grunt.util._(this.files).chain().pluck("src").flatten().uniq().value()}.bind(this)});return fn.apply(this,this.args)});thisTask=task._tasks[name];thisTask.multi=true};task.registerInitTask=function(name,info,fn){task.registerTask(name,info,fn);task._tasks[name].init=true};task.renameTask=function(oldname,newname){var result;try{result=parent.renameTask.apply(task,arguments);registry.untasks.push(oldname);registry.tasks.push(newname);return result}catch(e){grunt.log.error(e.message)}};task.runAllTargets=function(taskname,args){var targets=Object.keys(grunt.config.getRaw(taskname)||{});if(targets.length===0){grunt.log.error('No "'+taskname+'" targets found.');return false}targets.filter(isValidMultiTaskTarget).forEach(function(target){task.run([taskname,target].concat(args||[]).join(":"))})};var loadTaskStack=[];function loadTask(filepath){loadTaskStack.push(registry);registry={tasks:[],untasks:[],meta:{info:lastInfo,filepath:filepath}};var filename=path.basename(filepath);var msg='Loading "'+filename+'" tasks...';var regCount=0;var fn;try{fn=require(path.resolve(filepath));if(typeof fn==="function"){fn.call(grunt,grunt)}grunt.verbose.write(msg).ok();["un",""].forEach(function(prefix){var list=grunt.util._.chain(registry[prefix+"tasks"]).uniq().sort().value();if(list.length>0){regCount++;grunt.verbose.writeln((prefix?"- ":"+ ")+grunt.log.wordlist(list))}});if(regCount===0){grunt.verbose.warn("No tasks were registered or unregistered.")}}catch(e){grunt.log.write(msg).error().verbose.error(e.stack).or.error(e)}registry=loadTaskStack.pop()||{}}function loadTasksMessage(info){if(loadTaskDepth===0){lastInfo=info}grunt.verbose.subhead("Registering "+info+" tasks.")}function loadTasks(tasksdir){try{var files=grunt.file.glob.sync("*.{js,coffee}",{cwd:tasksdir,maxDepth:1});files.forEach(function(filename){loadTask(path.join(tasksdir,filename))})}catch(e){grunt.log.verbose.error(e.stack).or.error(e)}}task.loadTasks=function(tasksdir){loadTasksMessage('"'+tasksdir+'"');if(grunt.file.exists(tasksdir)){loadTasks(tasksdir)}else{grunt.log.error('Tasks directory "'+tasksdir+'" not found.')}};task.loadNpmTasks=function(name){loadTasksMessage('"'+name+'" local Npm module');var root=path.resolve("node_modules");var pkgfile=path.join(root,name,"package.json");var pkg=grunt.file.exists(pkgfile)?grunt.file.readJSON(pkgfile):{keywords:[]};if(pkg.keywords&&pkg.keywords.indexOf("gruntcollection")!==-1){loadTaskDepth++;Object.keys(pkg.dependencies).forEach(function(depName){var filepath=grunt.file.findup("node_modules/"+depName,{cwd:path.resolve("node_modules",name),nocase:true});if(filepath){task.loadNpmTasks(path.relative(root,filepath))}});loadTaskDepth--;return}var tasksdir=path.join(root,name,"tasks");if(grunt.file.exists(tasksdir)){loadTasks(tasksdir)}else{grunt.log.error('Local Npm module "'+name+'" not found. Is it installed?')}};task.init=function(tasks,options){if(!options){options={}}var allInit=tasks.length>0&&tasks.every(function(name){var obj=task._taskPlusArgs(name).task;return obj&&obj.init});var gruntfile=allInit?null:grunt.option("gruntfile")||grunt.file.findup("Gruntfile.{js,coffee}",{nocase:true});var msg='Reading "'+(gruntfile?path.basename(gruntfile):"???")+'" Gruntfile...';if(gruntfile&&grunt.file.exists(gruntfile)){grunt.verbose.writeln().write(msg).ok();process.chdir(grunt.option("base")||path.dirname(gruntfile));loadTasksMessage("Gruntfile");loadTask(gruntfile)}else if(options.help||allInit){}else if(grunt.option("gruntfile")){grunt.log.writeln().write(msg).error();grunt.fatal('Unable to find "'+gruntfile+'" Gruntfile.',grunt.fail.code.MISSING_GRUNTFILE)}else if(!grunt.option("help")){grunt.verbose.writeln().write(msg).error();grunt.log.writelns("A valid Gruntfile could not be found. Please see the getting "+"started guide for more information on how to configure grunt: "+"http://gruntjs.com/getting-started");grunt.fatal("Unable to find Gruntfile.",grunt.fail.code.MISSING_GRUNTFILE)}(grunt.option("npm")||[]).forEach(task.loadNpmTasks);(grunt.option("tasks")||[]).forEach(task.loadTasks)};